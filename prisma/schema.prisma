// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Artist {
    id String @id @default(uuid())

    name String

    followers Int @db.Int

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

    spotifyId String @db.VarChar(255)

    genres Genre[]

    image ArtistImage?

    tracks Track[]

}

model Track {
    id String @id @default(uuid())

    name String @db.VarChar(255)

    duration Int @db.Int

    image TrackImage?

    artistId String

    artist Artist @relation(fields: [artistId], references: [id])

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

    spotifyStreams Int @db.Int

    spotifyRevenue Float @db.Float


    @@index([artistId], map: "artistId")
}

model Genre {
    id Int @id @default(autoincrement())

    name String @db.VarChar(255)

    artists Artist[]

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt
}

model ArtistImage {
    id Int @id @default(autoincrement())

    url String @db.VarChar(255)

    height Int @db.Int

    width Int @db.Int

    artistId String? @unique

    artist Artist? @relation(fields: [artistId], references: [id])

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt
}

model TrackImage {
    id Int @id @default(autoincrement())

    url String @db.VarChar(255)

    height Int @db.Int

    width Int @db.Int

    trackId String? @unique

    track Track? @relation(fields: [trackId], references: [id])

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt
}
